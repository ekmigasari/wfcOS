generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth models for user authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription-related fields
  isPaid        Boolean        @default(false)
  subscriptions Subscription[]

  Session Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Polar subscription management
model Subscription {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polar-specific fields
  polarCustomerId String?
  polarPlanId     String?

  // Subscription details
  plan      SubscriptionPlan
  status    SubscriptionStatus
  startDate DateTime           @default(now())
  endDate   DateTime?

  // Payment information
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

// Enums for subscription management
enum SubscriptionPlan {
  MONTHLY
  YEARLY
  LIFETIME
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
}
