---
description: 
globs: 
alwaysApply: false
---

# Window System Integration Guide

This guide explains how to work with the wfcOS windowing system which provides a desktop-like experience with draggable, resizable windows.

## Window Component Architecture

The window system follows a streamlined component hierarchy:

- [Window.tsx](mdc:src/presentation/components/shared/window/Window.tsx) - Main container component
  - Creates the portal container dynamically
  - Renders all open windows from `windowAtoms` state
  - Handles window closing and focusing

- [WindowBase.tsx](mdc:src/presentation/components/shared/window/WindowBase.tsx) - Core window logic
  - Implements unified interaction logic for all devices
  - Handles dragging, resizing, focusing, and minimize operations
  - Manages window state transitions (using Jotai atoms)
  - Coordinates sound effects using the sound management system

- [WindowUI.tsx](mdc:src/presentation/components/shared/window/WindowUI.tsx) - Pure UI component
  - Renders window visuals (title bar, controls, content area, resize handles)
  - Heavily memoized to prevent unnecessary re-renders
  - Adapts layout for mobile vs desktop (hides resize handles on mobile)
  - Handles clicks on controls (minimize, close) by calling props (which first focus, then perform the action)

- [WindowProvider.tsx](mdc:src/presentation/components/shared/window/WindowProvider.tsx) - Context provider
  - Passes window state (`isOpen`, `isMinimized`, `onClose`) to child components
  - Allows app components to react to the window's statate Management

Windows are managed through Jotai atoms defined in [windowAtoms.ts](mdc:src/application/atoms/windowAtoms.ts).

### Key Types

```typescript
// Defined in windowAtoms.ts
export interface WindowState {
  id: string;             // Unique window instance ID
  appId: string;          // App type identifier
  title: string;          // Window title
  position: Position;     // {x, y} coordinates
  size: Size;             // {width, height}
  minSize?: Size;         // Minimum allowed size
  isOpen: boolean;        // Whether window is rendered
  isMinimized: boolean;   // Whether minimized to taskbar
  zIndex: number;         // Stacking order
}

// Defined in WindowBase.tsx
export interface WindowBaseProps {
  windowId: string;
  appId: string;
  title: string;
  children: React.ReactNode;
  isOpen: boolean;
  isMinimized?: boolean;
  onClose: () => void;
  onFocus: () => void; // Callback triggered on focus attempts
  position: Position;
  size: Size;
  minSize?: Size;
  zIndex: number;
  playSounds?: boolean;
}
```

### Core Window Actions (Jotai Atoms)

- `openWindowAtom` - Creates a new window or brings existing one to front
- `closeWindowAtom` - Closes a window (sets `isOpen` to `false`)
- `setWindowMinimizedStateAtom` - Sets the `isMinimized` state of a window
- `focusWindowAtom` - Brings window to front by updating its `zIndex`
- `updateWindowPositionSizeAtom` - Updates position/size after drag/resize

## Minimized Window Behavior

When a window is minimized:

1. The `isMinimized` flag in `windowAtoms` is set to `true`.
2. `WindowBase` renders a minimal hidden `div` instead of `WindowUI`.
   - Uses CSS: `position: fixed`, `left: -9999px`, `opacity: 0`, `pointerEvents: none`, `zIndex: -1`, `visibility: hidden`
   - This keeps the `memoizedChildren` mounted and running (e.g., audio, timers).
3. The window appears in the taskbar via [MinimizedIcons.tsx](mdc:src/presentation/components/shared/taskbar/MinimizedIcons.tsx).
   - Clicking a taskbar icon restores the window using `setWindowMinimizedStateAtom({ windowId, isMinimized: false })`.
   - Restored windows are brought to the front automatically by the `useEffect` in `WindowBase` calling `focusWindowAtom`.

## Using the Window System

### Opening a Window

```typescript
// From any component, e.g., an icon click handler
import { useAtom } from "jotai";
import { openWindowAtom } from "@/applindowAtoms";
import { MyApp } from "@/components/apps/MyApp"; // Your app component

export const OpenMyAppButton = () => {
  const [, openWindow] = useAtom(openWindowAtom);

  const handleClick = () => {
    openWindow({
      // Required properties for a new window instance
      id: `myApp-${Date.now()}`, // Must be unique per instance
      appId: "myApp",             // Matchgistry
      title: "My Application",
      initialSize: { width: 500,0 },
      // Optional properties
      minSize: { width: 250, height: 150 },
      // in{ x: 100, y: 100 } // Defaults to random-ish position
    });
  };

  return <button onClick={Open My App</button>;
};
```
*Note: The actual app />` in this example) is retrieved from the `appRegistry` within the `Window` component ahildren` to `WindowBase`.*

### Implementing Custom Window Behavior

If your appecial window behaviors:

1. **Use the `WindowProvider` context** in your app component:

```typescript
// In your app component, e.g., src/presentation/components/apps/MyApp.tsx
import { useWindowState } from "@/presentation/components/shared/window/WindowProvider";

export const MyApp = () => {
  // Access state provided by WindowBase through context
  const { isOpen, isMinimized, onClose } = useWindowState();

  // Example: Custom close handler with confirmation
  const handleCustomClose = () => {
    if (confirm("Save changes before closing?")) {
      // Perform save logic...
      onClose(); // Call the provided onClose function to trigger window closing
    }
  };

  return (
    <div>
      {/* Use the custom handler */}
      <button onClick={handleCustomClose}>Close App</button>
      <p>Window State: {isOpen ? 'Open' : 'Closed'}, {isMinimized ? 'Minimized' : 'Visible'}</p>
      {/* ... rest of your app content ... */}
    </div>
  );
};
```

2. **Register app lifecycle hooks** in `appRegistry`:

```typescript
// In src/infrastructure/config/appRegistry.ts
import { MyApp } from "@/presentation/components/apps/MyApp";
import { AppConfig } from "@/application/types/app"; // Assuming this type definition exists

export const appRegistry: Record<string, AppConfig> = {
  "myApp": {
    name: "My App",
    icon: "/icons/myapp.svg", // Example icon path
    component: MyApp, // Reference to your app component
    // Optional lifecycle hooks (receive Jotai's 'set' function and windowId)
    onOpen: (set, windowId) => {
      console.log("MyApp window opened:", windowId);
      // Example: set(someGlobalAtom, true);
    },
    onClose: (set, windowId) => {
      console.log("MyApp window closed:", windowId);
      // Example: Clean up app-specific state in Jotai
      // set(myAppSpecificAtom, defaultState);
    },
    onMinimize: (set, windowId, isMinimized) => {
      console.log("MyApp window minimize state changed:", windowId, isMinimized);
      // Example: Pause/resume background tasks based on minimize state
      // set(myAppTimerAtom, (prev) => ({ ...prev, isPaused: isMinimized }));
    }
  },
  // ... other registered apps
};
```

## Sound Effects

The window system includes sound effects for various interactions:

- **Drag Start/End**: Managed in `handleDragStart` / `handleDragEnd` in `WindowBase.tsx`.
- **Resize Start/End**: Managed in `handleResizeStart` / `handleResizeEnd` in `WindowBase.tsx`.
- **Minimizing**: Managed in `handleMinimize` in `WindowBase.tsx`.
- **Closing**: Managed in `handleCloseWindow` in `Window.tsx`.

Sound playback uses the sound management system in [utils.ts](mdc:src/infrastructure/lib/utils.ts) (`playSound`, `stopSound`), ensuring sounds stop immediately when actions end and handling potential playback errors. Sounds are identified by type (e.g., `DRAG_SOUND`, `RESIZE_SOUND`).

## Responsive Design

The window system is responsive by default:

- **Desktop**: Full dragging and resizing capabilities via mouse interactions handled in `WindowBase.tsx`. Resize handles are visible.
- **Mobile**:
  - Dragging is constrained within screen bounds (`handleDragMove` in `WindowBase.tsx`).
  - Resizing is disabled (resize handles are hidden in `WindowUI.tsx` when `isMobile` is true).
- Automatic device detection uses the `useDeviceDetect` hook within `WindowBase.tsx`.

## Portal-Based Rendering

Window rendering uses React's `createPortal` for isolation:

1. The `Window` component dynamically creates a `div` with `id="window-portal-container"` and appends it to `document.body` if it doesn't exist.
2. All `WindowBase` components (representing individual windows) are rendered into this shared portal container using `createPortal`.
3. This isolates windows from the main React component tree's layout and styling.
4. Windows naturally stack based on their `zIndex` property managed by `focusWindowAtom`.

See [Window.tsx](mdc:src/presentation/components/shared/window/Window.tsx) for the implementation details.
